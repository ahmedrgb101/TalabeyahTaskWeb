@typeparam TEntity
@typeparam TId
@typeparam TRequest

@inject IJSRuntime JS
@inject IStringLocalizer<SharedResource> L

<style>
    .mud-table-container {
        overflow: auto;
    }
</style>

<ErrorBoundary>
    <ChildContent>

        @if (_canSearch && (Context.AdvancedSearchEnabled || AdvancedSearchContent is not null))
        {
            <MudExpansionPanel @bind-IsExpanded="_advancedSearchExpanded"
                           Style="padding:10px!important; margin-bottom:10px!important;border-radius: var(--mud-default-borderradius) !important;"
                           Class="mud-elevation-25" Text="@L["Advanced Search"]">
                <MudTextField @bind-Value="SearchString" Immediate="true"
                          Placeholder="@($"{L["Search for"]} {Context.EntityNamePlural}")" Adornment="Adornment.Start"
                          AdornmentIcon="@Icons.Material.Filled.Search" IconSize="Size.Medium"
                          Style="flex:none!important;margin:0px!important" TextChanged="OnSearchStringChanged">
                </MudTextField>
                @* @if (Context.AdvancedSearchEnabled)
            {
            <div style="margin-top:10px!important">
            <MudCheckBox Label="All Columns" T="bool" Checked="Context.AllColumnsChecked"
            CheckedChanged="Context.AllColumnsCheckChanged"></MudCheckBox>
            @foreach (var field in Context.Fields)
            {
            <MudCheckBox @bind-Checked="@field.CheckedForSearch" Label="@(field.DisplayName)"></MudCheckBox>
            }
            </div>
            }*@
                @AdvancedSearchContent

            </MudExpansionPanel>
        }
        @if (Context.IsDisplay)
        {
            var colorField = Context.Fields.FirstOrDefault(x => x.ColorValueFunc != null);

            <FshTable @ref="_table" Elevation="25" ServerData="@ServerReloadFunc" Items="@_entityList" Filter="LocalSearch"
                  Loading="@Loading" LoadingProgressColor="@Color.Secondary" ChildRowContent="@ChildRowContent">

                <ToolBarContent>
                    <div class="justify-center mud-text-align-center">
                        @if (_canCreate)
                        {
                            <MudButton DisableElevation Variant="Variant.Filled" Color="Color.Primary"
                               OnClick="(() => InvokeModal())" StartIcon="@Icons.Material.Filled.Add"
                               IconColor="Color.Surface">@L["Create"]</MudButton>
                        }
                        @if (_canExport)
                        {
                            <MudButton DisableElevation Variant="Variant.Filled" Color="Color.Tertiary"
                               OnClick="(() => ExportAsync())" StartIcon="@Icons.Material.Filled.ImportExport"
                               Style="margin-left: 5px;" IconColor="Color.Surface">@L["Export"]</MudButton>
                        }
                        <MudButton DisableElevation Variant="Variant.Filled" OnClick="ReloadDataAsync"
                               StartIcon="@Icons.Material.Filled.Refresh" IconColor="Color.Surface" Color="Color.Secondary"
                               Style="margin-left: 5px;">@L["Reload"]</MudButton>
                    </div>
                    <MudSpacer />
                    @if (_canSearch && !_advancedSearchExpanded)
                    {
                        <MudTextField @bind-Value="SearchString" Immediate="true" FullWidth="false"
                              Placeholder="@($"{L["Search for"]} {Context.EntityNamePlural}")" Adornment="Adornment.End"
                              AdornmentIcon="@Icons.Material.Filled.Search" IconSize="Size.Medium" Class="mt-0 mb-3"
                              TextChanged="OnSearchStringChanged">
                        </MudTextField>
                    }
                </ToolBarContent>

                <HeaderContent>
                    @if (ActionsContent is not null || HasActions)
                    {
                        <MudTh Style="text-align:center">@L["Actions"]</MudTh>
                    }
                    @if (Context.Fields is not null)
                    {
                        foreach (var field in Context.Fields)
                        {
                            @if (field.IsDisplayed)
                            {
                                <MudTh>
                                    @if (Context.IsClientContext)
                                    {
                                        <MudTableSortLabel SortBy="@field.ValueFunc">@field.DisplayName</MudTableSortLabel>
                                    }
                                    else
                                    {
                                        <MudTableSortLabel T="TEntity" SortLabel="@field.SortLabel">@field.DisplayName</MudTableSortLabel>
                                    }
                                </MudTh>
                            }
                        }
                    }
                </HeaderContent>

                <RowTemplate>
                    @if (ActionsContent is not null || HasActions)
                    {

                        <MudTd DataLabel="Actions" Style="text-align: center">
                            @if (ActionsContent is not null)
                            {
                                @ActionsContent(context)
                            }
                            else if (HasActions && (CanUpdateEntity(context) || ExtraActions is not null || CanDeleteEntity(context)))
                            {
                                <MudMenu Icon="@Icons.Material.Filled.MoreHoriz" Variant="Variant.Text" DisableElevation="true"
                             EndIcon="@Icons.Filled.KeyboardArrowDown" IconColor="Color.Secondary" AnchorOrigin="Origin.CenterLeft">
                                    @if (CanUpdateEntity(context))
                                    {
                                        <MudMenuItem OnTouch="@(() => InvokeModal(context))" @onclick="@(() => InvokeModal(context))">@L["Edit"]</MudMenuItem>
                                    }
                                    @if (ExtraActions is not null)
                                    {
                                        @ExtraActions(context)
                                    }
                                    @if (CanDeleteEntity(context))
                                    {
                                        <MudMenuItem Style="color:red!important" @onclick="@(() => Delete(context))">@L["Delete"]</MudMenuItem>
                                    }
                                </MudMenu>
                            }
                            @* else
                    {
                    <MudButton Variant="Variant.Filled" DisableElevation="true"
                    StartIcon="@Icons.Material.Filled.DoNotTouch" IconColor="Color.Secondary" Size="Size.Small"
                    Color="Color.Surface">
                    @L["No Allowed Actions"]
                    </MudButton>
                    }*@
                        </MudTd>
                    }
                    @foreach (var field in Context.Fields)
                    {
                        @if (field.IsDisplayed)
                        {
                            var color = field.ColorValueFunc != null ? $"color:{field.ColorValueFunc(context)}" : "";

                            if (Context.ColorAll && colorField != null && string.IsNullOrEmpty(color))
                            {
                                color = colorField != null ? $"color:{colorField.ColorValueFunc(context)}" : "";
                            }


                            <MudTd Style="@(color)" DataLabel="@field.DisplayName">
                                @if (field.Template is not null)
                                {
                                    @field.Template(context)
                                }
                                else if (field.Type == typeof(bool))
                                {
                                    <MudCheckBox Checked="@field.ValueFunc(context)" ReadOnly Color="Color.Secondary"></MudCheckBox>
                                }
                                else
                                {
                                    <MudHighlighter Text="@field.ValueFunc(context)?.ToString()" HighlightedText="@SearchString" />
                                }
                            </MudTd>
                        }
                    }
                </RowTemplate>

                <PagerContent>
                    <TablePager />
                </PagerContent>

            </FshTable>
        }
    </ChildContent>
    <ErrorContent>
        <FshCustomError />
    </ErrorContent>
</ErrorBoundary>